{"version":3,"sources":["components/Header.js","components/EditNotesForm.js","components/NoteMarkDown.js","components/NoteList.js","components/AddNotesForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","EditNotesForm","onFieldChange","evt","key","setState","target","value","onNoteUpdate","updatedNote","title","state","note","db","ref","id","set","firebase","Modal","trigger","Button","basic","size","class","type","this","onChange","rows","Actions","color","inverted","onClick","Icon","name","Component","NoteMarkDown","source","NoteList","onRemoveNote","child","remove","notes","filter","item","onSearchChange","searchValue","includes","search","onKeyPressed","event","length","newNote","push","onKeyPress","placeholder","map","Truncate","lines","AddNotesForm","onNoteCreate","App","listenForChange","on","snapshot","val","align","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dae58f7a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Header = props => (\r\n  <header className=\"header\">\r\n      <div className=\"title\">BitNote</div>\r\n  </header>\r\n);\r\n\r\nexport default Header;","/*\r\n** React Component: EditNotesForms\r\n** Purpose: Support behavior to edit existing notes in the application\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport * as firebase from 'firebase';\r\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\";\r\n\r\n\r\nexport class EditNotesForm extends Component {\r\n         \r\nconstructor(props) {\r\n    super(props);\r\n\r\n    this.db = firebase.database();\r\n    this.state = {\r\n      id: this.props.id,\r\n      title: this.props.title,\r\n      note: this.props.note\r\n    };\r\n  }\r\n\r\n  onFieldChange= (evt, key) => {\r\n    this.setState({\r\n        [key]: evt.target.value\r\n    });\r\n  }\r\n\r\n  onNoteUpdate = () => {\r\n    let updatedNote = {\r\n      title: this.state.title,\r\n      note: this.state.note\r\n    };\r\n\r\n    this.db.ref(\"notes/\" + this.state.id)\r\n        .set(updatedNote);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal trigger={<Button>Edit</Button>} basic size=\"small\">\r\n      \r\n        <form class=\"ui form\">\r\n            <div class=\"field\">\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.title}\r\n                onChange={evt => this.onFieldChange(evt, \"title\")}\r\n              />\r\n            </div>\r\n            <div class=\"field\">\r\n              <textarea\r\n                value={this.state.note}\r\n                onChange={evt => this.onFieldChange(evt, \"note\")}\r\n                rows=\"3\"\r\n              />\r\n              <div class=\"field\"></div>\r\n            </div>\r\n          </form>\r\n          <Modal.Actions>\r\n            <Button color=\"green\" inverted onClick={evt => this.onNoteUpdate()}>\r\n              <Icon name=\"checkmark\" />Update\r\n            </Button>\r\n          </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditNotesForm\r\n\r\n","import React, { Component } from \"react\";\r\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nexport class NoteMarkDown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Modal trigger={<Button>MarkDown</Button>} basic size=\"large\">\r\n        <section>\r\n          <h3>Note Markdown</h3>\r\n          <ReactMarkdown source={this.props.note} />\r\n        </section>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteMarkDown;\r\n","/*\r\n** React Component: NoteList\r\n** Purpose: Support behavior to display all notes in the system with additional support for mark down\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport * as firebase from \"firebase\";\r\nimport EditNotesForm from \"./EditNotesForm\";\r\nimport NoteMarkDown from \"./NoteMarkDown\";\r\nimport Truncate from \"react-truncate\";\r\n\r\n\r\nexport class NoteList extends Component {\r\n         \r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.db = firebase.database();\r\n    this.state = {\r\n      notes: this.props.notes,\r\n      search: \"\"\r\n    };\r\n  }\r\n\r\n  onRemoveNote = (id) => {\r\n    this.db.ref(\"notes\")\r\n        .child(id).remove();\r\n\r\n    let notes = this.state.notes.filter(item => item.id != id)\r\n    this.setState({ \r\n      notes: notes \r\n    });\r\n  }\r\n\r\n  onSearchChange = (evt) => {\r\n    let searchValue = evt.target.value;\r\n    let notes = this.props.notes.filter(\r\n      note => note.title.includes(searchValue) || note.note.includes(searchValue)\r\n    );\r\n\r\n    this.setState({\r\n      notes: notes,\r\n      search: searchValue\r\n    });\r\n  }\r\n  \r\n  onKeyPressed = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      if(this.state.notes.length == 0) {\r\n        let notes = []\r\n        let newNote = { \r\n          id: 0, \r\n          title: event.target.value,\r\n          note: ''\r\n        }\r\n        \r\n        notes.push(newNote);\r\n\r\n        this.db.ref(\"notes\")\r\n            .push(newNote);\r\n        \r\n        this.setState({\r\n          notes: notes\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <section className=\"searchform\">\r\n          <div className=\"ui big icon input\">\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.search}\r\n              onChange={evt => this.onSearchChange(evt, \"search\")}\r\n              onKeyPress={this.onKeyPressed}\r\n              placeholder=\"Search Notes...\"\r\n            />\r\n          </div>\r\n        </section>\r\n\r\n        <section className=\"notes\">\r\n          {this.state.notes.map(note => (\r\n            <div className=\"note\" key={note.id}>\r\n              <div className=\"note-title\">\r\n                <h3>{note.title}</h3>\r\n                <div\r\n                  className=\"remove\"\r\n                  onClick={() => this.onRemoveNote(note.id)}\r\n                >\r\n                  x\r\n                </div>\r\n              </div>\r\n              <div className=\"note-content\">\r\n                <Truncate lines={1} >\r\n                  {note.note}\r\n                </Truncate>\r\n              </div>\r\n              <div className=\"note-title\">\r\n                <EditNotesForm\r\n                  id={note.id}\r\n                  title={note.title}\r\n                  note={note.note}\r\n                />\r\n                <NoteMarkDown note={note.note}/>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteList;\r\n","/*\r\n** React Component: AddNotesForms\r\n** Purpose: Support behavior to add new notes to teh application\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport * as firebase from 'firebase';\r\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\";\r\n\r\n\r\nexport class AddNotesForm extends Component {\r\n  \r\n  constructor() {\r\n    super();\r\n\r\n    this.db = firebase.database();\r\n    this.state = {\r\n      title: '',\r\n      note: ''\r\n    };\r\n  }\r\n\r\n  onFieldChange = (evt, key) => {\r\n    this.setState({\r\n      [key]: evt.target.value\r\n    });\r\n  }\r\n\r\n  onNoteCreate = () => {\r\n    if(this.state.title !== '' || this.state.note !== ''){\r\n      this.db.ref(\"notes\")\r\n        .push({\r\n          title: this.state.title,\r\n          note: this.state.note\r\n      });\r\n    }          \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        trigger={\r\n          <button className=\"huge ui icon button addNoteBtn\">\r\n            <i className=\"sticky note outline icon\"></i>\r\n          </button>\r\n        }\r\n        basic\r\n        size=\"large\"\r\n      >\r\n        <section>\r\n        <h3>Add New Note</h3>\r\n          <form class=\"ui form\">\r\n            <div class=\"field\">\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.title}\r\n                onChange={evt => this.onFieldChange(evt, \"title\")}\r\n                placeholder=\"Enter Title\"\r\n              />\r\n            </div>\r\n            <div class=\"field\">\r\n              <textarea\r\n                value={this.state.note}\r\n                onChange={evt => this.onFieldChange(evt, \"note\")}\r\n                placeholder=\"Enter Note\"\r\n                rows=\"3\"\r\n              />\r\n              <div class=\"field\"></div>\r\n            </div>\r\n          </form>\r\n          <Modal.Actions>\r\n            <Button color=\"green\" inverted onClick={evt => this.onNoteCreate()} >\r\n              <Icon name=\"checkmark\" /> Save\r\n            </Button>\r\n          </Modal.Actions>\r\n        </section>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddNotesForm;\r\n\r\n\r\n","import React, { Component } from \"react\";\nimport * as firebase from \"firebase\";\n\nimport Header from \"./components/Header\";\nimport NoteList from \"./components/NoteList\";\nimport AddNotesForm from \"./components/AddNotesForm\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      notes: []\n    };\n  }\n\n  componentDidMount() {\n    this.db = firebase.database()\n    this.listenForChange();\n  }\n\n  listenForChange() {\n\n    //Detect addition of new note\n    this.db.ref(\"notes\").on(\"child_added\", snapshot => {\n      let note = {\n        id: snapshot.key,\n        title: snapshot.val().title,\n        note: snapshot.val().note\n      };\n\n      let notes = this.state.notes;\n      notes.push(note);\n\n      this.setState({\n        notes: notes\n      });\n    });\n\n    //detect removal of note\n    this.db.ref(\"notes\").on(\"child_removed\", snapshot => {\n      let notes = this.state.notes;\n      notes = notes.filter(note => note.id !== snapshot.key);\n\n      this.setState({\n        notes: notes\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main>\n          <div>\n            <NoteList notes={this.state.notes} />\n          </div>\n          <div align=\"right\">\n            <AddNotesForm />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\nimport \"semantic-ui-css/semantic.min.css\";\n\n\n // Fire Base Connection Configuration\n  const config = {\n    apiKey: \"AIzaSyAUxSQQyvQo4MejPf-ZMFkrtKscgYt70MM\",\n    authDomain: \"bitnote-49190.firebaseapp.com\",\n    databaseURL: \"https://bitnote-49190.firebaseio.com\",\n    projectId: \"bitnote-49190\",\n    storageBucket: \"bitnote-49190.appspot.com\",\n    messagingSenderId: \"176955867904\",\n    appId: \"1:176955867904:web:36e519145d5dcc29eb69e5\",\n    measurementId: \"G-FH3Y2YH0LZ\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(config);\n  firebase.analytics();\n\n  \n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}